name: DevCraft CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'augment/package.json'
          
      - name: Install dependencies
        run: cd augment && npm ci
        
      - name: Run ESLint
        run: cd augment && npx eslint .
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'augment/package.json'
          
      - name: Install dependencies
        run: cd augment && npm ci
        
      - name: Run tests
        run: cd augment && npm test
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: augment/coverage
          
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'augment/package.json'
          
      - name: Install dependencies
        run: cd augment && npm ci
        
      - name: Build PWA
        run: cd augment && npx workbox-cli generateSW workbox-config.js
        
      - name: Create .env file
        run: |
          cd augment
          echo "NODE_ENV=production" > .env.production
          echo "PORT=${{ secrets.PORT }}" >> .env.production
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "JWT_EXPIRES_IN=7d" >> .env.production
          echo "JWT_COOKIE_EXPIRES_IN=7" >> .env.production
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env.production
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env.production
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env.production
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env.production
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env.production
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env.production
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
        
      - name: Create build artifact
        run: |
          mkdir -p build
          cp -r augment/* build/
          tar -czf build.tar.gz build
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.tar.gz
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.devcraft.example.com
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          
      - name: Extract build artifact
        run: tar -xzf build.tar.gz
        
      - name: Deploy to staging server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: "build/*"
          target: "/var/www/devcraft-staging"
          strip_components: 1
          
      - name: Restart application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/devcraft-staging
            npm install --production
            pm2 restart devcraft-staging || pm2 start server.js --name devcraft-staging
            
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://devcraft.example.com
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          
      - name: Extract build artifact
        run: tar -xzf build.tar.gz
        
      - name: Deploy to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          source: "build/*"
          target: "/var/www/devcraft-production"
          strip_components: 1
          
      - name: Restart application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /var/www/devcraft-production
            npm install --production
            pm2 restart devcraft-production || pm2 start server.js --name devcraft-production
            
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Deployment Successful
          SLACK_MESSAGE: 'DevCraft has been successfully deployed! :rocket:'
          
      - name: Notify on failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Deployment Failed
          SLACK_MESSAGE: 'DevCraft deployment failed! :x:'
